#!/bin/bash
#++++++++++++++++
# Monitor Switch
#
# Moves currently focused window from one monitor to the other.
# Designed for a system with two monitors.
# Script should be triggered using a keyboard shortcut.
#++++++++++++++++
# width of left monitor
w_l_monitor=1920
h_l_monitor=1080

moving_window_main(){
# get active window position and width
    obj=$1
    x=`xwininfo -id $obj | grep "Absolute upper-left X" | awk '{print $4}'`
    y_abs=`xwininfo -id $obj | grep "Absolute upper-left Y" | awk '{print $4}'`
    y_rel=`xwininfo -id $obj | grep "Relative upper-left Y" | awk '{print $4}'`
    w=`xwininfo -id $obj | grep "Width" | awk '{print $2}'`
    h=`xwininfo -id $window | grep "Height" | awk '{print $2}'`
    h=$(($y_rel+$h))

# unmaximize
    wmctrl -i -r $obj -b remove,maximized_vert,maximized_horz

# calculate new x position
    if [ "$x" -lt "$w_l_monitor" ]; then
	# window on left monitor, then moving it right
	    new_x=$(($x+$w_l_monitor))
        #move window. Need to subtract the relative y-position.
        new_y=$(($y_abs-$y_rel))
        xdotool windowmove $obj $new_x $new_y
    fi

    if [ "$w" -eq "$w_l_monitor" -o "$h" -eq "$h_l_monitor" ]; then
	# maximize
	    wmctrl -i -r $obj -b add,maximized_vert,maximized_horz
    fi

}

moving_window_second(){
# get active window position and width
    obj=$1
    x=`xwininfo -id $obj | grep "Absolute upper-left X" | awk '{print $4}'`
    y_abs=`xwininfo -id $obj | grep "Absolute upper-left Y" | awk '{print $4}'`
    y_rel=`xwininfo -id $obj | grep "Relative upper-left Y" | awk '{print $4}'`
    w=`xwininfo -id $obj | grep "Width" | awk '{print $2}'`
    h=`xwininfo -id $window | grep "Height" | awk '{print $2}'`
    h=$(($y_rel+$h))

# unmaximize
    wmctrl -i -r $obj -b remove,maximized_vert,maximized_horz

# calculate new x position
    if [ "$x" -ge "$w_l_monitor" ]; then
	# window on right monitor
	    new_x=$(($x-$w_l_monitor))
#move window. Need to subtract the relative y-position.
        new_y=$(($y_abs-$y_rel))
        xdotool windowmove $obj $new_x $new_y
    fi

    if [ "$w" -eq "$w_l_monitor" -o "$h" -eq "$h_l_monitor" ]; then
	# maximize
	    wmctrl -i -r $obj -b add,maximized_vert,maximized_horz
    fi

}

window_key=`zenity --entry --text "(E)macs,(T)erm,(F)irefox, (M)ind or (C)alc?"`

if [ -z $window_key ];then
    exit 0
fi

main=0

case "$window_key" in
    "T")
        window_name='\<Terminal -'
        ;;
    "E")
        window_name="\<Emacs - "
        ;;
    "F")
        window_name='Vimperator$'
        ;;
    "C")
        window_name='\<Qalculate!'
        ;;
    "M")
        window_name='\<VYM - View Your Mind'
        ;;
    "G")
        window_name='Google Chrome$'
        ;;
    "P")
        window_name='\<Foxit Reader'
        ;;
    "L")
        window_name='\<a22543@peng-8540w'
        ;;
    "l")
        window_name='\<a22543@peng-8540w'
        main=1
        ;;
    "p")
        window_name='\<Foxit Reader'
        main=1
        ;;
    "g")
        window_name='Google Chrome$'
        main=1
        ;;
    "e")
        window_name="\<Emacs - "
        main=1
        ;;
    "f")
        window_name='Vimperator$'
        main=1
        ;;
    "c")
        window_name='\<Qalculate!'
        main=1
        ;;
    "m")
        window_name='\<VYM - View Your Mind'
        main=1
        ;;
    "t")
        window_name='\<Terminal -'
        main=1
        ;;
    "*")
        exit 0
        ;;
esac

if [ -z $window_name ]; then
    return
fi

#echo "window name is : $window_name"
window=`wmctrl -l | grep "$window_name" | head -n 1 | cut -f 1 -d " "`
#echo "window nuber is: $window"
if [ -z $window ]; then
    exit 0
fi
#echo "window id is [$window]"

if [ $main = 1 ]
then
    moving_window_main $window
else
#    active_window=`xdotool getactivewindow`
#    moving_window_left $active_window
    moving_window_second $window
fi

wmctrl -i -R $window
