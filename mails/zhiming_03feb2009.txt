Zhiming, here I write down what we were talking about before the Chinese Festival. I also have some new thoughts about the development and I put them here as point 3.

1. Low level design and code review can be more efficient if more teams are involved. Now the reviews of my team are limited within four or five team members in the team, on the other hand, I never took part in reviews owned by other teams last year. But in fact, our code change and design are always related to different external components, and we're also interested in some other components such as USB driver, profiling tool, etc. Definitely, reviewing across several teams exposes the misunderstanding between teams in early phase. Moreover, when changes are made in design and code, the owner can hardly identify all the impacts to related components, and in this case reviewing across teams becomes a effective means to make related team notice the impact. At last, by review, we can clearly know what others are doing so that we avoid duplicate effort.

Here I don't mean we have to go through the documents or code line by line, dressing up. This shall be done within sub-component team. Instead, I suggest a periodical meeting like bi-week meeting, in which experienced developers shall join. Before the meeting, teams submit documents and code they want to synchronize with other teams, or want comments from wide sources. During the meeting, the committee spends 10 or 20 minutes on listening the introduction and give comments for each items reviewed. In one word, a quick review, just to ensure quick synchronization and correct direction.

2. The architecture team may help development team more if they spend more time on system level design and system level plan. We have a schedule plan for platform delivery. To break down the whole task into sub-ones is necessary to accomplish it, so does to define the criteria and working scope for each one. Architecture team shall be the right ones to do the job. We encountered troubles from IPC and netmux, AP and BP in MAGX platform. Having not hold a postmortem meeting yet, we're undertaking android development. However I believe we have to strengthen the technical communication between teams, review of integration plan from technical perspective, testing. Besides thoese, BSP development and driver development are difficult parts of software development, technical expertise must be involved in the resource planning and schedule planning, project controlling. I think architecture team can realize its value in those areas.

3. OS team can define or develop the efficient development methods. We can hardly deliver a good platform to application developers unless we understand the application development by ourselves. Like in Taos project, I suggest we provide integrated development model to application developers rather than only BSP. As for the development model, it can be a step by step guide lines for application developers, such as how to create a makefile for the application, how to package the application and install into phone, and how to connect the application to debugger, etc. For each step in the guide lines, we introduce open source tools or tools developed by OS team to improve the efficiency of developing, verification and debugging. Several potential tools come into my mind: a bootloader which enables kernel in tftp, NFS root and unit test method for JNI code, jython or other scripting language which can make testers live better, and existing ones, such as VNC server and viewer, file sender and receiver. In other words, we deliver the development solution, with which application developers can repeat the success in an efficient way.

A few questions at the end: Whether or not does each TI delivery resolve fatal bugs for application developers or device driver developers? If not, why do we follow TI's release so tight? Can we evaluate each TI's release before moving? In my opinion, the product platform shall be stablest, but not newest. 
